// Generated by CoffeeScript 1.9.1
var fs;

fs = require('fs');

module.exports = {
  rename: function(ssh, source, destination, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.rename(source, destination, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        return sftp.rename(source, destination, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  chown: function(ssh, path, uid, gid, callback) {
    var open, ref, ref1;
    if (!(uid || gid)) {
      return callback(new Error('Either option "uid" or "gid" is required'));
    }
    if (!ssh) {
      return fs.chown(path, uid, gid, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.chown(path, uid, gid, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  chmod: function(ssh, path, mode, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.chmod(path, mode, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.chmod(path, mode, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  stat: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.stat(path, function(err, stat) {
        return callback(err, stat);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.stat(path, function(err, attr) {
          sftp.end();
          if (err && (err.type === 'NO_SUCH_FILE' || err.code === 2)) {
            err.code = 'ENOENT';
            return callback(err);
          }
          return callback(err, attr);
        });
      });
    }
  },
  lstat: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.lstat(path, function(err, stat) {
        return callback(err, stat);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.lstat(path, function(err, attr) {
          sftp.end();
          if (err && (err.type === 'NO_SUCH_FILE' || err.code === 2)) {
            err.code = 'ENOENT';
            return callback(err);
          }
          return callback(err, attr);
        });
      });
    }
  },
  unlink: function(ssh, source, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.unlink(source, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        return sftp.unlink(source, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  symlink: function(ssh, srcpath, dstpath, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.symlink(srcpath, dstpath, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.symlink(srcpath, dstpath, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  readlink: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.readlink(path, function(err, target) {
        return callback(err, target);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.readlink(path, function(err, target) {
          sftp.end();
          return callback(err, target);
        });
      });
    }
  },
  unlink: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.unlink(path, function(err) {
        return callback(err);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.unlink(path, function(err) {
          sftp.end();
          return callback(err);
        });
      });
    }
  },
  mkdir: function(ssh, path, options, callback) {
    var open, ref, ref1;
    if (arguments.length === 3) {
      callback = options;
      options = 0x1ff;
    }
    if (typeof options !== 'object') {
      options = {
        mode: options
      };
    }
    if (options.permissions) {
      process.stderr.write('Deprecated, use mode instead of permissions');
      options.mode = options.permissions;
    }
    if (typeof options.mode === 'string') {
      options.mode = parseInt(options.mode, 8);
    }
    if (!ssh) {
      return fs.mkdir(path, options.mode, function(err) {
        if (err) {
          return callback(err);
        }
        if (!(options.uid || options.gid)) {
          return callback();
        }
        return fs.chown(path, options.uid, options.gid, callback);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        var chown, finish, mkdir;
        if (err) {
          return callback(err);
        }
        mkdir = function() {
          return sftp.mkdir(path, options, function(err, attr) {
            if ((err != null ? err.message : void 0) === 'Failure') {
              err = new Error("EEXIST, mkdir '" + path + "'");
              err.errno = 47;
              err.code = 'EEXIST';
              err.path = path;
            }
            if (err) {
              return finish(err);
            }
            return chown();
          });
        };
        chown = function() {
          if (!(options.uid || options.gid)) {
            return finish();
          }
          return sftp.chown(path, options.uid, options.gid, function(err) {
            if (err) {
              return finish(err);
            }
            return finish();
          });
        };
        finish = function(err) {
          sftp.end();
          return callback(err);
        };
        return mkdir();
      });
    }
  },
  readdir: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.readdir(path, callback);
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        var not_a_dir;
        if (err) {
          return callback(err);
        }
        not_a_dir = function(err) {
          return sftp.stat(path, function(er, attr) {
            if (!er && !attr.isDirectory()) {
              err = Error("ENOTDIR, readdir '" + path + "'");
              err.errno = 27;
              err.code = 'ENOTDIR';
              err.path = path;
            }
            return callback(err);
          });
        };
        return sftp.opendir(path, function(err, handle) {
          if (err) {
            return not_a_dir(err);
          }
          return sftp.readdir(handle, function(err, files) {
            return sftp.close(handle, function(err) {
              var file;
              if (err) {
                return callback(err);
              }
              sftp.end();
              files = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = files.length; i < len; i++) {
                  file = files[i];
                  results.push(file.filename);
                }
                return results;
              })();
              return callback(err, files);
            });
          });
        });
      });
    }
  },
  readFile: function(ssh, path, options, callback) {
    var open, ref, ref1;
    if (arguments.length === 3) {
      callback = options;
      options = {};
    } else {
      if (typeof options === 'string') {
        options = {
          encoding: options
        };
      }
    }
    if (!path) {
      return callback(new Error("Invalid path '" + path + "'"));
    }
    if (!ssh) {
      return fs.readFile(path, options.encoding, function(err, content) {
        return callback(err, content);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        var data, finish, s;
        if (err) {
          return callback(err);
        }
        s = sftp.createReadStream(path, options);
        data = [];
        s.on('data', function(d) {
          return data.push(d.toString());
        });
        s.on('error', function(err) {
          return module.exports.stat(ssh, path, function(e, stat) {
            if (stat && stat.isDirectory()) {
              err = new Error("EISDIR, read");
              err.errno = 28;
              err.code = 'EISDIR';
              return finish(err);
            } else {
              err = new Error("ENOENT, open '" + path + "'");
              err.errno = 34;
              err.code = 'ENOENT';
              err.path = path;
              return finish(err);
            }
          });
        });
        s.on('end', function() {
          return finish(null, data.join(''));
        });
        return finish = function(err, data) {
          sftp.end();
          return callback(err, data);
        };
      });
    }
  },
  writeFile: function(ssh, source, content, options, callback) {
    var chmod, chown, finish, open, ref, ref1, write;
    if (arguments.length === 4) {
      callback = options;
      options = {};
    } else {
      if (typeof options === 'string') {
        options = {
          encoding: options
        };
      }
    }
    if (!ssh) {
      write = function() {
        var stream;
        stream = fs.createWriteStream(source, options);
        if (typeof content === 'string' || buffer.Buffer.isBuffer(content)) {
          if (content) {
            stream.write(content);
          }
          stream.end();
        } else {
          content.pipe(stream);
        }
        stream.on('error', function(err) {
          return callback(err);
        });
        stream.on('end', function() {
          return s.destroy();
        });
        return stream.on('close', function() {
          return chown();
        });
      };
      chown = function() {
        if (!(options.uid || options.gid)) {
          return chmod();
        }
        return fs.chown(source, options.uid, options.gid, function(err) {
          if (err) {
            return callback(err);
          }
          return chmod();
        });
      };
      chmod = function() {
        if (!options.mode) {
          return finish();
        }
        return fs.chmod(source, options.mode, function(err) {
          return finish(err);
        });
      };
      finish = function(err) {
        return callback(err);
      };
      return write();
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        write = function() {
          var s;
          s = sftp.createWriteStream(source, options);
          if (typeof content === 'string' || buffer.Buffer.isBuffer(content)) {
            if (content) {
              s.write(content);
            }
            s.end();
          } else {
            content.pipe(s);
          }
          s.on('error', function(err) {
            return finish(err);
          });
          s.on('end', function() {
            return s.destroy();
          });
          return s.on('close', function() {
            return chown();
          });
        };
        chown = function() {
          if (!(options.uid || options.gid)) {
            return chmod();
          }
          return sftp.chown(source, options.uid, options.gid, function(err) {
            if (err) {
              return finish(err);
            }
            return chmod();
          });
        };
        chmod = function() {
          if (!options.mode) {
            return finish();
          }
          return sftp.chmod(source, options.mode, function(err) {
            return finish(err);
          });
        };
        finish = function(err) {
          sftp.end();
          return callback(err);
        };
        return write();
      });
    }
  },
  exists: function(ssh, path, callback) {
    var open, ref, ref1;
    if (!ssh) {
      return fs.exists(path, function(exists) {
        return callback(null, exists);
      });
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        if (err) {
          return callback(err);
        }
        return sftp.stat(path, function(err, attr) {
          sftp.end();
          return callback(null, err ? false : true);
        });
      });
    }
  },
  createReadStream: function(ssh, source, options, callback) {
    var open, ref, ref1;
    if (arguments.length === 3) {
      callback = options;
      options = {};
    }
    if (!ssh) {
      return callback(null, fs.createReadStream(source, options));
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        var s;
        if (err) {
          return callback(err);
        }
        s = sftp.createReadStream(source, options);
        s.emit = (function(emit) {
          return function(key, val) {
            if (key === 'error' && (val != null ? val.message : void 0) === 'Failure') {
              val = new Error("EISDIR, read");
              val.errno = 28;
              val.code = 'EISDIR';
              return emit.call(this, 'error', val);
            }
            if (key === 'error' && val.message === 'No such file') {
              val = new Error("ENOENT, open '" + source + "'");
              val.errno = 34;
              val.code = 'ENOENT';
              val.path = source;
              return emit.call(this, 'error', val);
            }
            return emit.apply(this, arguments);
          };
        })(s.emit);
        s.on('close', function() {
          return sftp.end();
        });
        return callback(null, s);
      });
    }
  },
  createWriteStream: function(ssh, path, options, callback) {
    var open, ref, ref1;
    if (arguments.length === 3) {
      callback = options;
      options = {};
    }
    if (!ssh) {
      return callback(null, fs.createWriteStream(path, options));
    } else {
      open = ((ssh._state != null) && ssh._state !== 'closed') || (((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0));
      if (!open) {
        return callback(Error('Closed SSH Connection'));
      }
      return ssh.sftp(function(err, sftp) {
        var ws;
        if (err) {
          return callback(err);
        }
        ws = sftp.createWriteStream(path, options);
        ws.on('close', function() {
          return sftp.end();
        });
        return callback(null, ws);
      });
    }
  }
};
